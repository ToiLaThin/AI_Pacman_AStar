from matplotlib.pyplot import grid

# tại sao nên không nên dùng 2 biến easy_map và hard_map
# mà đưa vào thuộc tính thì __init__ lại được bản đồ ban đầu


class Map():
    def __init__(self, diff: int) -> None:
        self.grid = []
        self.easy_map = [[0, 0, 0, 1, 0, 0, 0, -1, 0, -1],
                         [0, -1, -1, -1, 0, -1, 0, 0, 0, 0],
                         [0, -1, 0, 0, 0, -1, -1, 0, -1, 0],
                         [0, -1, 0, -1, 0, 0, 0, 0, -1, -0],
                         [0, -1, 0, -1, -1, -1, 0, -1, -1, 0],
                         [0, 0, 0, 0, 0, -1, 0, -1, 0, 0],
                         [0, -1, 0, -1, 0, 0, 0, -1, 0, 0]]

        self.hard_map = [[0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -
                          1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -
                          1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 0],
                         [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1,
                          0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
                         [-1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1],
                         [-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1,
                          0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1],
                         [-1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -
                          1, -1, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1],
                         [-1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1],
                         [-1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -
                          1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1,
                          0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0],
                         [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
                         [-1, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -
                          1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, 0, -1],
                         [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1,
                          0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
                         [0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1,
                          0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
        if diff == 0:
            self.grid = self.easy_map
        elif diff == 1:
            self.grid = self.hard_map

    def remaining_diem(self) -> int:
        remaining_dots = 0
        for row in range(0, len(self.grid)):
            for col in range(0, len(self.grid[len(self.grid)-1])):
                if self.grid[row][col] == 1:
                    remaining_dots += 1
        return remaining_dots
